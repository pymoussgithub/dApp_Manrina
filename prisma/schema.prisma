// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "darwin-arm64"]
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                String              @id @default(uuid())
  name              String
  description       String?
  imageUrl          String
  category          String?
  wallet_address    String?
  producer_name     String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  basketSessionItem BasketSessionItem[]
  variants          ProductVariant[]
}

model ProductVariant {
  id                String              @id @default(uuid())
  optionSet         String
  optionValue       String
  product           Product             @relation(fields: [productId], references: [id])
  productId         String
  description       String?
  imageUrl          String?
  price             Float
  stock             Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  BasketSessionItem BasketSessionItem[]
  stockMovements    StockMovement[]
}

model BasketSessionItem {
  id               String         @id @default(uuid())
  quantity         Int
  product          ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId String
  basketSession    BasketSession  @relation(fields: [basketSessionId], references: [id])
  basketSessionId  String
  Product          Product        @relation(fields: [productId], references: [id])
  productId        String
  // name and price are kept so we can easily display the items in the basket and we have a ref of added price to basketSession
  name             String
  price            Float
}

model BasketSession {
  id              String              @id @default(uuid())
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  items           BasketSessionItem[]
  checkoutSession CheckoutSession[]
  address         Address?            @relation(fields: [addressId], references: [id])
  addressId       String?
  deliveryCost    Float
  deliveryDay     String?
  delivered       String? // delivered, not delivered, or anymore information
  retrieved       String? // some informations about the retrieval from the customer
  customer        Customer            @relation(fields: [customerId], references: [id])
  customerId      String
  total           Float
  paymentStatus   String              @default("pending") // pending, paid, failed
}

model CheckoutSession {
  id              String          @id @default(uuid())
  basketSession   BasketSession   @relation(fields: [basketSessionId], references: [id])
  basketSessionId String
  paymentStatus   String // pending, paid, failed
  paymentAmount   Float
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  stockMovements  StockMovement[]
  successPayload  Json?
}

model Customer {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String
  phone         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  basketSession BasketSession[]
  address       Address[]
}

model Address {
  id            String          @id @default(uuid())
  postalCode    String
  address       String
  city          String
  country       String
  name          String
  type          String // customer, relay, other
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  customer      Customer?       @relation(fields: [customerId], references: [id])
  customerId    String?
  basketSession BasketSession[]
}

model StockMovement {
  id                String           @id @default(uuid())
  variant           ProductVariant   @relation(fields: [variantId], references: [id])
  variantId         String
  previousStock     Int
  newStock          Int
  quantity          Int
  type              String // SALE, MANUAL_ADJUSTMENT, RESTOCK
  reason            String?
  checkoutSession   CheckoutSession? @relation(fields: [checkoutSessionId], references: [id])
  checkoutSessionId String?
  adjustedBy        String?
  createdAt         DateTime         @default(now())
}

model Admin {
    id        String   @id @default(uuid())
    username  String   @unique
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
